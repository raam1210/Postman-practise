{
	"info": {
		"_postman_id": "27fe9cb4-c57a-4cb1-af6e-d60ec0e02ada",
		"name": "Postman - Capstone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15866915"
	},
	"item": [
		{
			"name": "Pre requisite",
			"item": [
				{
					"name": "GET Books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://simple-books-api.glitch.me/books",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()\r",
									"pm.environment.set(\"token\", jsonData.accessToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\":\"Hari\",\r\n    \"clientEmail\":\"gdgf1232345345@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/api-clients",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Submit order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var bookId = pm.request.body.raw ? JSON.parse(pm.request.body.raw).bookId : null;\r",
									"var customerName = pm.request.body.raw ? JSON.parse(pm.request.body.raw).customerName : null;\r",
									"\r",
									"pm.environment.set(\"Book_ID\", bookId);\r",
									"pm.environment.set(\"Customer_Name\", customerName);\r",
									"pm.environment.set(\"Order_ID\", jsonData.orderId);\r",
									"\r",
									"\r",
									"//Verify if \"created\" field is true in response\r",
									"pm.test(\"Verify if created field is True in response\", function () {\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"//Verify if \"orderId\" field is present in response\r",
									"pm.test(\"Verify if orderID field is present in response \", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"orderId\");\r",
									"});\r",
									"\r",
									"\r",
									"//Verify response Content-Type is application/json\r",
									"pm.test(\"Verify response Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");});\r",
									"\r",
									"\r",
									"//Verify if the status code is 201\r",
									"pm.test(\"Verify the status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"const expectedSumitOrderJsonSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"created\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"orderId\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"created\",\r",
									"    \"orderId\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Verify JSON Schema for submit order\",function(){\r",
									"    pm.response.to.have.jsonSchema(expectedSumitOrderJsonSchema)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookId\": {{Book_Id}},\r\n    \"customerName\": \"{{Customer_Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var requestOrderId = pm.request.url.path[pm.request.url.path.length - 1];\r",
									"\r",
									"\r",
									"//Verify the orderID in response is same as passed in request\r",
									"pm.test(\"Verify the orderID in response is same as passed in request\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(requestOrderId);\r",
									"});\r",
									"\r",
									"//Verify the bookID in response is correct\r",
									"pm.test(\"Verify the bookId in response is same as against which the order is placed\", function () {\r",
									"    pm.expect(jsonData.bookId).to.eql(pm.environment.get(\"Book_ID\"));\r",
									"});\r",
									"\r",
									"//Verify the Customer name in response is correct\r",
									"pm.test(\"Verify the Customer name is same as against who the order is placed\", function () {\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"Customer_Name\"));\r",
									"});\r",
									"\r",
									"//Verify if createdBy field is present in response\r",
									"pm.test(\"Verify if createdBy field is present in response \", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"createdBy\");\r",
									"});\r",
									"\r",
									"//Verify if quantity field is present in response\r",
									"pm.test(\"Verify if quantity field is present in response \", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"quantity\");\r",
									"});\r",
									"\r",
									"//Verify if timestamp field is present in response\r",
									"pm.test(\"Verify if timestamp field is present in response \", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"//Verify response Content-Type is application/json\r",
									"pm.test(\"Verify response Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");});\r",
									"\r",
									"\r",
									"//Verify if the status code is 200\r",
									"pm.test(\"Verify the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const expectedGetOrderJsonSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"bookId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"customerName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdBy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"quantity\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"bookId\",\r",
									"    \"customerName\",\r",
									"    \"createdBy\",\r",
									"    \"quantity\",\r",
									"    \"timestamp\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Verify JSON Schema for Get order\",function(){\r",
									"    pm.response.to.have.jsonSchema(expectedGetOrderJsonSchema)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/{{Order_ID}}",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								"{{Order_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function generateCustomerName() {\r",
									"    const names = \"Random_update\"\r",
									"    const timestamp = new Date().getTime();\r",
									"    return `${names}_${timestamp}`;\r",
									"}\r",
									"\r",
									"const newCustomerName = generateCustomerName();\r",
									"pm.environment.set(\"Updated_Customer_Name\", newCustomerName);\r",
									"pm.environment.set(\"Updated_Customer_Name\", JSON.parse(pm.request.body.raw).customerName);\r",
									"\r",
									"\r",
									"//Verify if the status code is 204\r",
									"pm.test(\"Verify the status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\":\"{{Updated_Customer_Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/{{Order_ID}}",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								"{{Order_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order after Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var requestOrderId = pm.request.url.path[pm.request.url.path.length - 1];\r",
									"\r",
									"\r",
									"//Verify the orderID in response is same as passed in request\r",
									"pm.test(\"Verify the orderID\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(requestOrderId);\r",
									"});\r",
									"\r",
									"//Verify the bookID in response is correct\r",
									"pm.test(\"Verify the bookId\", function () {\r",
									"    pm.expect(jsonData.bookId).to.eql(pm.environment.get(\"Book_ID\"));\r",
									"});\r",
									"\r",
									"//Verify the Customer name after update\r",
									"pm.test(\"Verify the Customer name after update\", function () {\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"Updated_Customer_Name\"));\r",
									"});\r",
									"\r",
									"//Verify if createdBy field is present in response\r",
									"pm.test(\"Verify if createdBy field is present in response \", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"createdBy\");\r",
									"});\r",
									"\r",
									"//Verify if quantity field is present in response\r",
									"pm.test(\"Verify if quantity field is present in response \", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"quantity\");\r",
									"});\r",
									"\r",
									"//Verify if timestamp field is present in response\r",
									"pm.test(\"Verify if timestamp field is present in response \", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"//Verify response Content-Type is application/json\r",
									"pm.test(\"Verify response Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");});\r",
									"\r",
									"\r",
									"//Verify if the status code is 200\r",
									"pm.test(\"Verify the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const expectedGetOrderJsonSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"bookId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"customerName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdBy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"quantity\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"bookId\",\r",
									"    \"customerName\",\r",
									"    \"createdBy\",\r",
									"    \"quantity\",\r",
									"    \"timestamp\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Verify JSON Schema for Get order\",function(){\r",
									"    pm.response.to.have.jsonSchema(expectedGetOrderJsonSchema)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/{{Order_ID}}",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								"{{Order_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify if the status code is 204\r",
									"pm.test(\"Verify the status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/{{Order_ID}}",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								"{{Order_ID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}